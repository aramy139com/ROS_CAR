#include "StFlash.h"
/**@file StFlash.h
  *@brief stm32 flash的读写操作
  *    使用：
  *        * 此文件主要是针对STM32F103系列的芯片，注意不同容量大小的芯片的地址范围不一样
  *        * 使用Read和Write函数进行读写，具体参数和返回值见函数说明  
  *        * 可以利用flash模拟EEPROM使用
  * 
  *@author  DHS（746769845@qq.com）
  *
  */


u16 STMFLASH_BUF[STM_SECTOR_SIZE/2];//最多是2K字节
STFLASH::STFLASH(uint32_t startAddress,bool useHalfWord){
	if(startAddress%STM_SECTOR_SIZE!=0)//不是页的开始,将开始处设置为下一个页开始的地方
		startAddress+=(STM_SECTOR_SIZE-(startAddress%STM_SECTOR_SIZE));
	mStartAddress=startAddress;
	mUseHalfWord=useHalfWord;
}

//读取指定地址的半字(16位数据)
//faddr:读地址(此地址必须为2的倍数!!)
//返回值:对应数据.

u16  STFLASH:: ReadHalfWord(u32 faddr){
	return *(vu16*)faddr; 
}
//WriteAddr:起始地址
//pBuffer:数据指针
//NumToWrite:半字(16位)数   
void STFLASH::Write_NoCheck(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite){	
	u16 i;
	for(i=0;i<NumToWrite;i++)
	{
		FLASH_ProgramHalfWord(WriteAddr,pBuffer[i]);
	    WriteAddr+=2;//地址增加2.
	}  
}
//从指定地址开始写入指定长度的数据
//WriteAddr:起始地址(此地址必须为2的倍数!!)
//pBuffer:数据指针
//NumToWrite:半字(16位)数(就是要写入的16位数据的个数.)
void STFLASH::Write(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite){
	u32 secpos;	   //扇区地址
	u16 secoff;	   //扇区内偏移地址(16位字计算)
	u16 secremain; //扇区内剩余地址(16位字计算)	   
 	u16 i;    
	u32 offaddr;   //去掉0X08000000后的地址
	if(WriteAddr<STM32_FLASH_BASE||(WriteAddr>=(STM32_FLASH_BASE+1024*STM32_FLASH_SIZE)))return;//非法地址
	FLASH_Unlock();						//解锁
	offaddr=WriteAddr-STM32_FLASH_BASE;		//实际偏移地址.
	secpos=offaddr/STM_SECTOR_SIZE;			//扇区地址  0~127 for STM32F103RBT6
	secoff=(offaddr%STM_SECTOR_SIZE)/2;		//在扇区内的偏移(2个字节为基本单位.)
	secremain=STM_SECTOR_SIZE/2-secoff;		//扇区剩余空间大小   
	if(NumToWrite<=secremain)secremain=NumToWrite;//不大于该扇区范围
	while(1) 
	{	
		Read(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//读出整个扇区的内容
		for(i=0;i<secremain;i++)//校验数据
		{
			if(STMFLASH_BUF[secoff+i]!=0XFFFF)break;//需要擦除  	  
		}
		if(i<secremain)//需要擦除
		{
			FLASH_ErasePage(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE);//擦除这个扇区
			for(i=0;i<secremain;i++)//复制
			{
				STMFLASH_BUF[i+secoff]=pBuffer[i];	  
			}
			Write_NoCheck(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//写入整个扇区  
		}else Write_NoCheck(WriteAddr,pBuffer,secremain);//写已经擦除了的,直接写入扇区剩余区间. 				   
		if(NumToWrite==secremain)break;//写入结束了
		else//写入未结束
		{
			secpos++;				//扇区地址增1
			secoff=0;				//偏移位置为0 	 
		   	pBuffer+=secremain;  	//指针偏移
			WriteAddr+=secremain;	//写地址偏移	   
		   	NumToWrite-=secremain;	//字节(16位)数递减
			if(NumToWrite>(STM_SECTOR_SIZE/2))secremain=STM_SECTOR_SIZE/2;//下一个扇区还是写不完
			else secremain=NumToWrite;//下一个扇区可以写完了
		}	 
	};	
	FLASH_Lock();//上锁
}

//从指定地址开始读出指定长度的数据
//ReadAddr:起始地址
//pBuffer:数据指针
//NumToWrite:半字(16位)数
void STFLASH::Read(u32 ReadAddr,u16 *pBuffer,u16 NumToRead){
	u16 i;
	for(i=0;i<NumToRead;i++)
	{
		pBuffer[i]=ReadHalfWord(ReadAddr);//读取2个字节.
		ReadAddr+=2;//偏移2个字节.	
	}
}

main文件：
#include "stm32f10x.h"
#include "StFlash.h"/要写入到STM32 FLASH的字符串数组
const u8 TEXT_Buffer[]={"Flash_test"};
#define SIZE sizeof(TEXT_Buffer)		//数组长度
#define FLASH_SAVE_ADDR  0X0800FC00		//设置FLASH 保存地址(必须为偶数，且其值要大于本代码所占用FLASH的大小+0X08000000)
u8 datatemp[SIZE];


STFLASH flash1;//
int main()
{
SysTick_Config(72000);                                                    
flash1.Write(FLASH_SAVE_ADDR,(u16*)TEXT_Buffer,SIZE);//写数据，第一次下载程序到32，第二次注释掉此行，断电重新编译下载 //keil watch查看datatemp数组的数据正是之前写进去的数据
flash1.Read(FLASH_SAVE_ADDR,(u16*)datatemp,SIZE);//读数据
	
 while(1) {  

      }
}

